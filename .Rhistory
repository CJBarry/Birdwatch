contour(Cxy)
dim(Cxy)
y <- matrix(seq(-3, 3, 601), 601, 601, byrow = T)
x <- matrix(seq(-3, 3, 601), 601, 601)
Cxy <- C(x, y)
contour(Cxy)
dim(Cxy)
Cxy <- Reduce(C, x, y)
x[1:5, 1:5]
y <- matrix(seq(-3, 3, length.out = 601), 601, 601, byrow = T)
x <- matrix(seq(-3, 3, length.out = 601), 601, 601)
Cxy <- C(x, y)
contour(Cxy)
incirc <- x^2 + y^2 < 2*D*t
image(incirc)
sum(Cxy[incirc]*0.0001)
incirc <- x^2 + y^2 <= 2*D*t
sum(Cxy[incirc]*0.0001)
source('C:/Users/cjb309/Dropbox/Scripts/R/shapetools.R')
circle(1, n = 4)
circle(1, n = 5)
plot(circle(1, n = 5), type = "l")
plot(circle(1, n = 51), type = "l")
C <- function(x, y) 1/(4*pi*A)*exp(-(x^2 + y^2))
A <- 1
x <- matrix(seq(-3, 3, 0.01), 601, 601)
Cxy <- C(x, t(x))
image(x[, 1], x[, 1], Cxy, col = colorRampPalette(c("white", "red"))(21))
image(x[, 1], x[, 1], Cxy, col = colorRampPalette(c("transparent", "red"))(21), xlab = "x", ylab = "y")
image(x[, 1], x[, 1], Cxy, col = colorRampPalette(c("transparent", "red"))(21), xlab = "x\u2032", ylab = "y\u2032")
class(bquote())
typeof(bquote())
is.expression(bquote())
image(x[, 1], x[, 1], Cxy, col = colorRampPalette(c("transparent", "red"))(21), xlab = "x\u2032", ylab = bquote("x"["T"]*"\u2032"))
image(x[, 1], x[, 1], Cxy, col = colorRampPalette(c("transparent", "red"))(21), xlab = bquote("x"[L]*"\u2032"), ylab = bquote("x"["T"]*"\u2032"))
fc <- sqrt(log(2))
lines(circle(2*sqrt(A)))
2*sqrt(A)
lines(circle(2*sqrt(A)*fc))
C
inc <- x^2 + t(x)^2 < 2*sqrt(A)*fc
sum(Cxy)*1e-4
sum(Cxy[inc])*1e-4
x[1:5, 1:5]
t(x)[1:5, 1:5]
par(mar)
par("mar")
fc
C
C
C <- function(x, y) 1/(pi)*exp(-(x^2 + y^2))
Cxy <- C(x, t(x))
image(x[, 1], x[, 1], Cxy, col = colorRampPalette(c("transparent", "red"))(21), xlab = bquote("x"[L]*"\u2032"), ylab = bquote("x"["T"]*"\u2032"))
sum(Cxy)*1e-4
inc <- x^2 + t(x)^2 < fc
sum(Cxy[inc])*1e-4
fc
sum(inc)
sum(inc)/length(Cxy)
sqrt(26173)
range(Cxy[inc])
range(Cxy)
lines(circle(fc))
com <- cos(pi/4)
com
lines(cbind(c(-3, -com*fc, NA, com*fc, 3, NA, 3, com*fc, NA, -com*fc, -3),
c(-3, -com*fc, NA, com*fc, 3, NA, -3, -com*fc, NA, com*fc, 3)))
install.packages("pracma")
edgx <- 4/pi*(fc + (sqrt(pi)/2)*pracma::erfc(fc))
points(c(0, egdx, -edgx, 0, 0), c(0, 0, 0, egdx, egdx), pch = 16, col = "blue", cex = c(4, 1, 1, 1, 1))
points(c(0, edgx, -edgx, 0, 0), c(0, 0, 0, edgx, edgx), pch = 16, col = "blue", cex = c(4, 1, 1, 1, 1))
points(c(0, edgx, -edgx, 0, 0), c(0, 0, 0, edgx, -edgx), pch = 16, col = "blue", cex = c(4, 1, 1, 1, 1))
image(x[, 1], x[, 1], Cxy, col = colorRampPalette(c("transparent", "red"))(21), xlab = bquote("x"[L]*"\u2032"), ylab = bquote("x"["T"]*"\u2032"))
par("mar") <- c(5.1, 5.1, 1.1, 1.1)
par("mar" = c(5.1, 5.1, 1.1, 1.1))
image(x[, 1], x[, 1], Cxy, col = colorRampPalette(c("transparent", "red"))(21), xlab = bquote("x"[L]*"\u2032"), ylab = bquote("x"["T"]*"\u2032"))
lines(circle(fc))
lines(cbind(c(-3, -com*fc, NA, com*fc, 3, NA, 3, com*fc, NA, -com*fc, -3),
c(-3, -com*fc, NA, com*fc, 3, NA, -3, -com*fc, NA, com*fc, 3)))
points(c(0, edgx, -edgx, 0, 0), c(0, 0, 0, edgx, -edgx), pch = 16, col = "blue", cex = c(2, 1, 1, 1, 1))
text(c(0, edgx, -edgx, 0, 0), c(0, 0, 0, edgx, -edgx), col = "blue", labels = c("centre", "disp 1", "disp 3", "disp 2", "disp 4"), pos = 3)
sum(inc)
cond <- inc & x < t(x) & x >= -t(x) & x > 0
image(cond)
cond <- !inc & x > t(x) & x <= -t(x) & x > 0
image(cond)
cond <- !inc & x > t(x) & x <= -t(x) & t(x) > 0
image(cond)
cond <- !inc & x > t(x) & x >= -t(x) & x > 0
image(cond)
sum(Cxy[cond]*x[cond])/sum(Cxy[cond])
4/pi*(fc + sqrt(pi)/2*pracma::erfc(fc))
(4/pi*(fc + sqrt(pi)/2*pracma::erfc(fc)))/sqrt(2)
4/pi*(fc + sqrt(pi)/4*pracma::erfc(fc))
edgx <- 4/pi*(fc + (sqrt(pi)/2)*pracma::erfc(fc))
4/pi*(fc + sqrt(pi)/2*pracma::erfc(fc))
help(convolve)
convolve(c(-1, 0, 0, 1, -1), c(-1, 1, 1, -1, 1))
convolve(c(-1, 0, 0, 0, -1), c(-1, 1, 1, -1, 1))
4e-17 == 0
convolve(c(-1L, 0L, 0L, 0L, -1L), c(-1L, 1L, 1L, -1L, 1L))
choose(3, 2)
choose(3, 1)
choose(3, 3)
choose(4, 3)
choose(4, 2)
help(choose)
lchoose(4, 4)
lchoose(4, 2)
combn(c(1:2))
combn(c(1:2), 2)
combn(1:3, 2)
combn(c(-1L, 1L), 2)
combn(c(-1L, 1L), 4)
combn(rep(c(-1L, 1L), 3), 3)
unique.matrix(combn(rep(c(-1L, 1L), 3), 3), 2)
unique.matrix(combn(rep(c(-1L, 1L), 3), 3), margin = 2)
unique.matrix(combn(rep(c(-1L, 1L), 3), 3), MARGIN = 2)
require("plyr")
source('C:/Users/cjb309/Dropbox/Scripts/R/spdtest.R')
source('C:/Users/cjb309/Dropbox/Scripts/R/spdtest.R')
head(warnings())
source('C:/Users/cjb309/Dropbox/Scripts/R/spdtest.R')
system.time(source('C:/Users/cjb309/Dropbox/Scripts/R/spdtest.R'))
source('C:/Users/cjb309/Dropbox/Scripts/R/spdtest.R')
source('C:/Users/cjb309/Dropbox/Scripts/R/spdtest.R')
source('C:/Users/cjb309/Dropbox/Scripts/R/spdtest.R')
19 %% c(1, 2, 4, 8)
19 %% c(1, 2, 4, 8, 16)
19 %/% c(1, 2, 4, 8, 16)
19 %/% c(1, 2, 4, 8, 16, 32)
19 %% c(1, 2, 4, 8, 16, 32)
(19 - c(16, 8, 4, 2, 1)) %% 2^(4:0)
(19 - c(16, 8, 4, 2, 1)) %/% 2^(4:0)
log2(19)
as.raw(19L)
as.raw(19)
typeof(as.raw(19))
as.double(as.raw(19))
as.character(as.raw(19))
require("stringr")
str_split("anc", "")
str <- "Some words like this."
sum(str_split(str, "")[[1]] %in% c("a", "e", "i", "o", "u"))
help("unique")
40^36
setwd("GitHub/Birdwatch/")
setwd("temperature/")
tdata <- read.csv("station_data-201411010000-201412312359.csv")
str(tdata)
head(as.POSIXct(tdata$ob_end_time))
typeof(tdata$ob_end_time)
typeof(levels(tdata$ob_end_time))
head(levels(tdata$ob_end_time))
typeof(as.POSIXct(tdata$ob_end_time))
library("stringr")
t.datetime <- str_split(levels(tdata$ob_end_time)[tdata$ob_end_time], " ")
head(t.datetime)
t.ymd <- str_split(sapply(t.datetime, `[`, 1), "-")
head(t.ymd)
t.hm <- str_split(sapply(t.datetime, `[`, 2), ":")
head(t.hm)
t.ymd <- do.call(rbind, t.ymd)
head(t.ymd)
t.hm <- do.call(rbind, t.hm)
mode(t.ymd) <- "integer"
mode(t.hm) <- "integer"
head(t.hm)
head(t.ymd)
source("C:/Users/cjb309/Dropbox/Scripts/R/td.R")
t.dref <- apply(t.ymd, function(r) td(r[3], r[2], r[1]))
t.dref <- apply(t.ymd, 1, function(r) td(r[3], r[2], r[1]))
head(t.dref)
range(t.dref)
td(1, 11, 2014)
diff(range(t.dref))
ampm <- ifelse(t.hm[, 1] < 12, "am", "pm")
str(tdata)
unique(tdata$version_num)
repackdata <- with(tdata, data.frame(datetime = ob_end_time,))
colnames(t.ymd) <- c("y", "m", "d")
colnames(t.hm) <- c("h", "min")
repackdata <- with(tdata, data.frame(datetime = ob_end_time,
t.ymd, t.hm,
id = id,
met_domain_name = met_domain_name,
src_id = src_id,))
repackdata <- with(tdata, data.frame(datetime_end = ob_end_time,
t.ymd, t.hm,
night = ampm == "am"
id = id,
met_domain_name = met_domain_name,
src_id = src_id,
minAT = min_air_temp,
maxAT = max_air_temp))
repackdata <- with(tdata, data.frame(datetime_end = ob_end_time,
t.ymd, t.hm,
night = ampm == "am",
id = id,
met_domain_name = met_domain_name,
src_id = src_id,
minAT = min_air_temp,
maxAT = max_air_temp))
tdata2 <- with(tdata, data.frame(datetime_end = ob_end_time,
t.ymd, t.hm,
night = ampm == "am",
id = id,
met_domain_name = met_domain_name,
src_id = src_id,
minAT = min_air_temp,
maxAT = max_air_temp))
rm(repackdata)
str(tdata2)
tdata2$meanAT <- with(tdata2, rowMeans(cbind(minAT, maxAT)))
str(tdata2)
tdata2$dref <- t.dref
str(tdata2)
with(tdata2, plot(dref, meanAT))
with(tdata2, plot(dref, meanAT, type = "l"))
with(tdata2[tdata$night], plot(dref, meanAT, type = "l"))
with(tdata2[tdata$night,], plot(dref, meanAT, type = "l"))
with(tdata2[tdata2$night,], plot(dref, meanAT, type = "l"))
with(tdata2[!tdata2$night,], plot(dref, meanAT, type = "l"))
tdata2 <- tdata2[, c(14, 1:13)]
with(tdata2[!tdata2$night,], plot(dref/365.25 + 1900, meanAT, type = "l"))
write.csv(tdata2, "station_2014_11-12")
unique(tdata2)
unique(tdata2$src_id)
unique(tdata2$met_domain_name)
unique(tdata2$id)
unique(tdata2$src_id[tdata$met_domain_name == "NCM"])
unique(tdata2$src_id[tdata$met_domain_name == 1])
unique(tdata2$src_id[tdata$met_domain_name == "AWSDLY"])
unique(tdata2$src_id[tdata$met_domain_name == 2])
source('~/GitHub/Birdwatch/temperature/repack_tdata.R')
tdata3 <- tdata2
source('~/GitHub/Birdwatch/temperature/repack_tdata.R')
write.csv(rbind(tdata2, tdata3), "Tdata_DJF14-15")
met <- read.csv("../met/metoffice_sites.csv")
str(met)
with(met, plot(Longitude, Latitude))
require("data.table")
unique(met$region)
unique(met$Region)
range(met$ID)
range(tdata2$src_id)
range(tdata2$id)
tdata <- rbind(tdata2, tdata3)
rm(tdata2, tdata3)
setDT(tdata)
tdata
plot(NA, xlim = c(-9, 2), ylim = c(49, 61), xlab = "long", ylab = "lat")
tdata[, with(met[met$ID == src_id,], points(Longitude, Latitude, pch = 16, colorRamp(c("blue", "red"))(mean(meanAT, na.rm = TRUE)/20))]
tdata[, with(met[met$ID == src_id,], points(Longitude, Latitude, pch = 16, colorRamp(c("blue", "red"))(mean(meanAT, na.rm = TRUE)/20)), by = src_id]
tdata[, with(met[met$ID == src_id,], points(Longitude, Latitude, pch = 16, colorRamp(c("blue", "red"))(mean(meanAT, na.rm = TRUE)/20))), by = src_id]
tdata[, with(met[met$ID == src_id,, drop = F], points(Longitude, Latitude, pch = 16, colorRamp(c("blue", "red"))(mean(meanAT, na.rm = TRUE)/20))), by = src_id]
met[met$ID == 15,, drop = F]
met[met$ID == 4000,, drop = F]
tdata[, with(met[met$ID == id,, drop = F], points(Longitude, Latitude, pch = 16, colorRamp(c("blue", "red"))(mean(meanAT, na.rm = TRUE)/20))), by = src_id]
head(tdata$id)
met[met$ID == 2010,, drop = F]
met[met$ID == 5641,, drop = F]
head(tdata$src_id)
met[met$ID == 57254,, drop = F]
met[met$ID == 32,, drop = F]
head(met$ID)
met[met$ID == 3,, drop = F]
met$ID
uniqueN(tdata$src_id)
uniqueN(tdata$id)
met[met$ID == 371685,, drop = F]
range(tdata$src_id)
range(tdata$id)
met[met$ID == 400002,, drop = F]
all(tdata$src_id %in% met$ID)
all(tdata$id %in% met$ID)
sum(tdata$src_id %in% met$ID)
sum(tdata$id %in% met$ID)
sum(unique(tdata$id) %in% met$ID)
with(met, plot(Longitude, Latitude, pch = 3))
require("maptools")
counties <- readShapePoly("../shapefiles/county_region.shp")
plot(counties)
slotNames(counties)
slot(counties, "proj4string")
slotNames(counties, axes = TRUE)
plot(counties, axes = T)
install.packages("mapproj")
require("mapproj")
ukm <- readShapePoly("../shapefiles/Map_UK.shp")
slot(ukm, "proj4string")
plot(ukm, axes = T)
bounds <- readShapePoly("../../../County_and_Unitary_Authorities_(E+W)_2015_boundaries_(full_extent)/CTYUA_DEC_2015_EW_BFE.shp")
slotNames(bounds)
plot(bounds, axes = T)
object.size(bounds)/2^20
bbox(bounds)
ctyua <- readShapePoly("../CTYUA_ll.shp")
bbox(ctyua)
plot(ctyua)
plot(ctyua, axes = T)
str(slot(ctyua, "data"))
levels(slot(ctyua, "data")$CTYUA15NMW)
levels(slot(ctyua, "data")$CTYUA15NM)
str(slot(ukm, "data"))
plot(ukm, axes = TRUE)
slot(ukm, "data")$VAR_NAME_2
slot(ukm, "data")$VARNAME_2
slot(ukm, "data")$NAME_2
rm(list = ls())
setwd("..")
counties <- readShapeSpatial("shapefiles/counties_ll.shp")
plot(counties, axes = T)
str(slot(counties, "data"))
require("rgeos")
county.cents <- gCentroid(counties)
plot(county.cents, add = T, pch = 3, col = "red")
county.cents <- gCentroid(counties, byid = TRUE)
plot(county.cents, add = T, pch = 3, col = "red")
slotNames(county.cents)
county.cents <- SpatialPointsDataFrame(county.cents, slot(counties, "data"))
plot(county.cents, xlim = c(-5, 0), ylim = c(55, 60), axes = T)
text(county.cents, county.cents$NAME_2, pos = 4)
plot(county.cents, xlim = c(-5, 0), ylim = c(55, 60), axes = T)
text(county.cents, levels(county.cents$NAME_2)[county.cents$NAME_2], pos = 4)
writeSpatialShape(county.cents, "shapefiles/countycentroids_ll.shp")
tst <- readShapePoints("shapefiles/countycentroids_ll.shp")
slotNames(tst)
slot(tst, "data")
bdata <- read.csv("birds/county_2015.csv")
str(bdata)
all(bdata$county %in% slot(counties, "data")$NAME_2)
sum(bdata$county %in% slot(counties, "data")$NAME_2)
sum(!bdata$county %in% slot(counties, "data")$NAME_2)
sum(bdata$county %in% slot(counties, "data")$NAME_1)
bdata$county[!bdata$county %in% slot(counties, "data")$NAME_2]
unique(bdata$county[!bdata$county %in% slot(counties, "data")$NAME_2])
plot.abund <- function(species){
df <- merge(slot(counties, "data"), bdata, by.x = NAME_2, by.y = county, all.x = TRUE, all.y = FALSE)
plot(counties, asp = 2, col = colorRamp(c("white", "darkgreen"))(df$mean/max(df$mean)))
}
plot.abund("Barn Owl")
plot.abund <- function(species){
df <- merge(slot(counties, "data"), bdata, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
plot(counties, asp = 2, col = colorRamp(c("white", "darkgreen"))(df$mean/max(df$mean)))
}
plot.abund("Barn Owl")
plot.abund <- function(species){
abunds <- bdata[bdata$species = species, c("county", "mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
plot(counties, asp = 2, col = colorRamp(c("white", "darkgreen"))(df$mean/max(df$mean)))
}
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
plot(counties, asp = 2, col = colorRamp(c("white", "darkgreen"))(df$mean/max(df$mean)))
}
plot.abund("Barn Owl")
str(bdata)
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
plot(counties, asp = 2, col = colorRamp(c("white", "darkgreen"))(df$Mean/max(df$Mean)))
}
str(bdata)
plot.abund("Barn Owl")
plot.abund("Barn_Owl")
species <- "Barn_Owl"
abunds <- bdata[bdata$species == species, c("county", "Mean")]
str(abunds)
species <- "Barn_owl"
str(abunds)
plot.abund("Barn_owl")
plot.abund("Barn_owl")
abunds <- bdata[bdata$species == species, c("county", "Mean")]
str(abunds)
plot.abund("Barn_owl ")
species <- "Barn_ow l"
species <- "Barn_owl "
abunds <- bdata[bdata$species == species, c("county", "Mean")]
str(abunds)
range(abunds$Mean)
plot.abund("Blackbird ")
species %in% bdata$species
species <- "Blackbird "
abunds <- bdata[bdata$species == species, c("county", "Mean")]
jupyter notebook
str(abunds)
help(colorRamp)
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
str(df)
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)}] <- 0
plot(counties, asp = 2, col = colorRamp(c("white", "darkgreen"))(df$Mean/max(df$Mean)))
}
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)] <- 0
plot(counties, asp = 2, col = colorRamp(c("white", "darkgreen"))(df$Mean/max(df$Mean)))
}
plot.abund("Blackbird ")
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)] <- 0
plot(counties, asp = 2, col = colorRamp(c("white", "green"))(df$Mean/max(df$Mean)))
}
plot.abund("Blackbird ")
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)] <- 0
plot(counties, asp = 2, col = colorRamp(c("green", "darkgreen"))(df$Mean/max(df$Mean)))
}
plot.abund("Blackbird ")
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)] <- 0
plot(counties, asp = 2, col = colorRamp(c("blue", "red"))(df$Mean/max(df$Mean)))
}
plot.abund("Blackbird ")
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)] <- 0
plot(counties, asp = 2, col = colorRamp(c("white", "green", "darkgreen"), interpolate = "linear")(df$Mean/max(df$Mean)))
}
plot.abund("Blackbird ")
"lightgreen" %in% colours()
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)] <- 0
plot(counties, asp = 2, col = colorRamp(c("lightgreen", "green", "darkgreen"), interpolate = "linear")(df$Mean/max(df$Mean)))
}
"lightgreen" %in% colours()
plot.abund("Blackbird ")
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)] <- 0
plot(counties, asp = 2, col = colorRamp(c("white", "grey"), interpolate = "linear")(df$Mean/max(df$Mean)))
}
plot.abund("Blackbird ")
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)] <- 0
plot(counties, asp = 2, col = colorRamp(c("lightgreen", "green", "darkgreen"), interpolate = "linear")(df$Mean/max(df$Mean)))
}
plot.abund("Blackbird ")
bdata[bdata$species = "Blackbird ",]
bdata[bdata$species == "Blackbird ",]
plot.abund("Robin ")
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)] <- 0
plot(counties, asp = 2, col = colorRamp(c("lightgreen", "green", "darkgreen", "darkgreen"), interpolate = "linear")(df$Mean/max(df$Mean)))
}
plot.abund("Robin ")
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)] <- 0
plot(counties, asp = 2, col = grey.colors(df$Mean/max(df$Mean)))
}
plot.abund("Robin ")
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)] <- 0
plot(counties, asp = 2, col = colorRamp(c("lightgreen", "green", "darkgreen"), interpolate = "linear")(df$Mean/max(df$Mean)))
}
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)] <- 0
plot(counties, asp = 2, col = colorRamp(c("lightgreen", "green", "darkgreen"), space = "rgb", interpolate = "linear")(df$Mean/max(df$Mean)))
}
plot.abund("Robin ")
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)] <- 0
plot(counties, asp = 2, col = colorRamp(c("lightgreen", "green", "darkgreen"), space = "rgb", interpolate = "linear")(df$Mean/max(df$Mean)), xlim = c(-7, 3), ylim = c(-49, 60))
}
plot.abund("Robin ")
bbox(counties)
plot.abund <- function(species){
abunds <- bdata[bdata$species == species, c("county", "Mean")]
df <- merge(slot(counties, "data"), abunds, by.x = "NAME_2", by.y = "county", all.x = TRUE, all.y = FALSE)
df$Mean[is.na(df$Mean)] <- 0
plot(counties, asp = 2, col = colorRamp(c("lightgreen", "green", "darkgreen"), space = "rgb", interpolate = "linear")(df$Mean/max(df$Mean)))
}
plot.abund("Robin ")
tmins <- c(133.0, 101.0, 139.0, 114.0, 111.0, 131.0)
plot(2009:2015, tmins, type = "l", col = "blue", lwd = 2)
plot(2009:2014, tmins, type = "l", col = "blue", lwd = 2)
tmins <- c(133.0, 101.0, 139.0, 114.0, 111.0, 131.0, 138)
plot(2009:2014, tmins, type = "l", col = "blue", lwd = 2)
pdf("minwinttemp.pdf", 10, 6)
plot(2009:2014, tmins, type = "l", col = "blue", lwd = 2, xlab = "year", ylab = "T/ degreeC", main = "minimum winter temperature")
plot(2009:2015, tmins, type = "l", col = "blue", lwd = 2, xlab = "year", ylab = "T/ degreeC", main = "minimum winter temperature")
dev.off()
plot.abund("Robin ")
dev.new()
plot.abund("Blackbird ")
